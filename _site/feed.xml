<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-21T21:58:17+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">White’s Blog</title><subtitle>Web Scraping Specialist &amp; Creative Builder</subtitle><author><name>White</name></author><entry><title type="html">Python网页抓取入门：从零开始构建你的第一个爬虫</title><link href="http://localhost:4000/2025/01/15/python-web-scraping-basics/" rel="alternate" type="text/html" title="Python网页抓取入门：从零开始构建你的第一个爬虫" /><published>2025-01-15T00:00:00+08:00</published><updated>2025-01-15T00:00:00+08:00</updated><id>http://localhost:4000/2025/01/15/python-web-scraping-basics</id><content type="html" xml:base="http://localhost:4000/2025/01/15/python-web-scraping-basics/"><![CDATA[<h1 id="python网页抓取入门">Python网页抓取入门</h1>

<p>网页抓取是现代数据获取的重要手段。作为一名专注于网页抓取的工程师，我想分享一些入门的经验和最佳实践。</p>

<h2 id="为什么选择python">为什么选择Python？</h2>

<p>Python在网页抓取领域有着得天独厚的优势：</p>

<ul>
  <li><strong>简洁的语法</strong>：让你专注于业务逻辑而不是语法细节</li>
  <li><strong>丰富的库生态</strong>：requests、BeautifulSoup、Scrapy等强大工具</li>
  <li><strong>活跃的社区</strong>：遇到问题总能找到解决方案</li>
</ul>

<h2 id="基础工具介绍">基础工具介绍</h2>

<h3 id="requests库">requests库</h3>

<p>用于发送HTTP请求，获取网页内容：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>

<span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'https://example.com'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="beautifulsoup">BeautifulSoup</h3>

<p>用于解析HTML内容，提取所需数据：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>

<span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
<span class="n">title</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">'title'</span><span class="p">).</span><span class="n">text</span>
</code></pre></div></div>

<h2 id="第一个爬虫实例">第一个爬虫实例</h2>

<p>让我们构建一个简单的爬虫来抓取新闻标题：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>

<span class="k">def</span> <span class="nf">scrape_news</span><span class="p">():</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s">'https://news.example.com'</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
        <span class="n">titles</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'h2'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="s">'news-title'</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">title</span> <span class="ow">in</span> <span class="n">titles</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="n">title</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">strip</span><span class="p">())</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">scrape_news</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="重要的注意事项">重要的注意事项</h2>

<ol>
  <li><strong>遵守robots.txt</strong>：始终检查网站的robots.txt文件</li>
  <li><strong>控制请求频率</strong>：避免对目标网站造成压力</li>
  <li><strong>处理异常</strong>：网络请求可能失败，要有容错机制</li>
  <li><strong>尊重版权</strong>：确保你的抓取行为符合法律法规</li>
</ol>

<h2 id="下一步学习">下一步学习</h2>

<ul>
  <li>学习Scrapy框架进行大规模抓取</li>
  <li>掌握反爬虫技术的应对方法</li>
  <li>了解数据存储和处理技术</li>
</ul>

<p>网页抓取是一门实践性很强的技术，建议大家多动手实践，在实际项目中积累经验。</p>

<blockquote>
  <p>记住费曼的话：如果你能简单地解释它，说明你真正理解了它。爬虫技术也是如此，从简单开始，逐步深入。</p>
</blockquote>]]></content><author><name>White</name></author><category term="技术" /><category term="Python" /><category term="爬虫" /><category term="网页抓取" /><category term="BeautifulSoup" /><category term="requests" /><summary type="html"><![CDATA[这篇文章将带你从零开始学习Python网页抓取，掌握基础的爬虫开发技巧。]]></summary></entry><entry><title type="html">自动化工具开发心得：让重复性工作成为历史</title><link href="http://localhost:4000/2025/01/10/automation-tools-development/" rel="alternate" type="text/html" title="自动化工具开发心得：让重复性工作成为历史" /><published>2025-01-10T00:00:00+08:00</published><updated>2025-01-10T00:00:00+08:00</updated><id>http://localhost:4000/2025/01/10/automation-tools-development</id><content type="html" xml:base="http://localhost:4000/2025/01/10/automation-tools-development/"><![CDATA[<h1 id="自动化工具开发心得">自动化工具开发心得</h1>

<p>在日常工作中，我们经常会遇到大量重复性的任务。作为一名工程师，我的第一反应总是：能不能用代码来解决这个问题？</p>

<h2 id="识别自动化机会">识别自动化机会</h2>

<h3 id="什么样的任务适合自动化">什么样的任务适合自动化？</h3>

<ul>
  <li><strong>重复性高</strong>：同样的操作需要反复执行</li>
  <li><strong>规则明确</strong>：有清晰的判断标准和处理逻辑</li>
  <li><strong>耗时较长</strong>：手动操作消耗大量时间</li>
  <li><strong>容易出错</strong>：人工操作容易产生错误</li>
</ul>

<h3 id="实际案例分享">实际案例分享</h3>

<p>最近我遇到一个需求：每天需要从多个网站收集数据，整理成报表发送给团队。这个过程包括：</p>

<ol>
  <li>访问10个不同的网站</li>
  <li>提取特定的数据指标</li>
  <li>整理成Excel表格</li>
  <li>发送邮件给相关人员</li>
</ol>

<p>手动操作需要2小时，而且容易出错。</p>

<h2 id="自动化解决方案">自动化解决方案</h2>

<h3 id="设计思路">设计思路</h3>

<p>我采用了模块化的设计思路：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 数据收集模块
</span><span class="k">class</span> <span class="nc">DataCollector</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">collect_from_source</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">source_config</span><span class="p">):</span>
        <span class="c1"># 实现数据抓取逻辑
</span>        <span class="k">pass</span>

<span class="c1"># 数据处理模块  
</span><span class="k">class</span> <span class="nc">DataProcessor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">process_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">raw_data</span><span class="p">):</span>
        <span class="c1"># 实现数据清洗和转换
</span>        <span class="k">pass</span>

<span class="c1"># 报表生成模块
</span><span class="k">class</span> <span class="nc">ReportGenerator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">generate_excel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">processed_data</span><span class="p">):</span>
        <span class="c1"># 生成Excel报表
</span>        <span class="k">pass</span>

<span class="c1"># 邮件发送模块
</span><span class="k">class</span> <span class="nc">EmailSender</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">send_report</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">report_file</span><span class="p">,</span> <span class="n">recipients</span><span class="p">):</span>
        <span class="c1"># 发送邮件
</span>        <span class="k">pass</span>
</code></pre></div></div>

<h3 id="关键技术点">关键技术点</h3>

<ol>
  <li><strong>配置驱动</strong>：所有网站信息、邮件设置都通过配置文件管理</li>
  <li><strong>错误处理</strong>：每个步骤都有完善的异常处理机制</li>
  <li><strong>日志记录</strong>：详细记录执行过程，便于问题排查</li>
  <li><strong>定时执行</strong>：使用cron job实现定时自动执行</li>
</ol>

<h2 id="开发过程中的思考">开发过程中的思考</h2>

<h3 id="投入产出比分析">投入产出比分析</h3>

<p>开发这个工具花费了我8小时，但它帮我每天节省2小时。一周后就收回了开发成本，长期来看收益巨大。</p>

<h3 id="用户体验的重要性">用户体验的重要性</h3>

<p>即使是给自己用的工具，用户体验也很重要：</p>

<ul>
  <li><strong>清晰的日志输出</strong>：让我知道工具在做什么</li>
  <li><strong>友好的错误提示</strong>：出现问题时能快速定位</li>
  <li><strong>简单的配置方式</strong>：修改参数不需要改代码</li>
</ul>

<h2 id="费曼学习法的应用">费曼学习法的应用</h2>

<p>在开发过程中，我经常问自己：</p>

<ul>
  <li>如果要向一个非技术人员解释这个工具，我会怎么说？</li>
  <li>这个设计是否足够简单，让六个月后的我能快速理解？</li>
  <li>能否用更简单的方式实现同样的功能？</li>
</ul>

<p>这种思考方式帮我设计出了更简洁、更易维护的代码。</p>

<h2 id="总结与建议">总结与建议</h2>

<ol>
  <li><strong>从小开始</strong>：不要一开始就想做一个完美的工具</li>
  <li><strong>持续改进</strong>：根据使用过程中的反馈不断优化</li>
  <li><strong>文档化</strong>：记录工具的使用方法和设计思路</li>
  <li><strong>分享交流</strong>：与同事分享你的自动化工具，可能对他们也有帮助</li>
</ol>

<p>自动化不仅仅是技术问题，更是思维方式的转变。当我们开始习惯性地思考”这个能自动化吗？”时，工作效率会有质的提升。</p>

<blockquote>
  <p>记住：好的工具应该让你忘记它的存在，专注于真正重要的工作。</p>
</blockquote>]]></content><author><name>White</name></author><category term="产品" /><category term="自动化" /><category term="自动化" /><category term="工具开发" /><category term="效率" /><summary type="html"><![CDATA[分享我在开发自动化工具过程中的心得体会，以及如何识别和解决日常工作中的重复性问题。]]></summary></entry><entry><title type="html">费曼学习法在编程中的实践：如何真正掌握一门技术</title><link href="http://localhost:4000/2025/01/05/feynman-technique-in-programming/" rel="alternate" type="text/html" title="费曼学习法在编程中的实践：如何真正掌握一门技术" /><published>2025-01-05T00:00:00+08:00</published><updated>2025-01-05T00:00:00+08:00</updated><id>http://localhost:4000/2025/01/05/feynman-technique-in-programming</id><content type="html" xml:base="http://localhost:4000/2025/01/05/feynman-technique-in-programming/"><![CDATA[<h1 id="费曼学习法在编程中的实践">费曼学习法在编程中的实践</h1>

<p>理查德·费曼不仅是一位杰出的物理学家，更是一位优秀的教育者。他提出的学习方法对我的编程生涯产生了深远的影响。</p>

<h2 id="费曼学习法的四个步骤">费曼学习法的四个步骤</h2>

<h3 id="1-选择一个概念">1. 选择一个概念</h3>

<p>首先，选择你想要学习的编程概念。比如：</p>

<ul>
  <li>数据结构中的”哈希表”</li>
  <li>设计模式中的”观察者模式”</li>
  <li>网络编程中的”TCP/IP协议”</li>
</ul>

<h3 id="2-用简单的语言解释">2. 用简单的语言解释</h3>

<p>尝试用最简单的语言，向一个没有编程基础的人解释这个概念。</p>

<p>以哈希表为例：</p>

<blockquote>
  <p>“哈希表就像一个智能的图书馆管理系统。当你要找一本书时，不需要一本本翻找，而是直接告诉管理员书名，他就能立即告诉你书在哪个位置。哈希表通过一个特殊的’地址计算器’（哈希函数），能够直接计算出数据应该存放的位置。”</p>
</blockquote>

<h3 id="3-识别知识空白">3. 识别知识空白</h3>

<p>在解释过程中，你会发现自己卡壳的地方。这些就是你的知识空白：</p>

<ul>
  <li>为什么哈希函数能保证数据分布均匀？</li>
  <li>哈希冲突是怎么产生的？</li>
  <li>解决冲突的方法有哪些？</li>
</ul>

<h3 id="4-简化和类比">4. 简化和类比</h3>

<p>回到学习材料，填补知识空白后，再次用更简单的方式解释。</p>

<h2 id="在编程实践中的应用">在编程实践中的应用</h2>

<h3 id="代码注释的艺术">代码注释的艺术</h3>

<p>我开始将费曼学习法应用到代码注释中：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HashTable</span><span class="p">:</span>
    <span class="s">"""
    哈希表实现
    
    就像一个智能通讯录：
    - 输入姓名（key），直接得到电话号码（value）
    - 不需要翻遍整个通讯录，瞬间定位
    """</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="c1"># 创建指定大小的"储物柜"数组
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">size</span> <span class="o">=</span> <span class="n">size</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">table</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">size</span><span class="p">)]</span>
    
    <span class="k">def</span> <span class="nf">_hash</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="s">"""
        哈希函数：将任意长度的key转换为数组索引
        就像把人名转换为储物柜编号
        """</span>
        <span class="k">return</span> <span class="nb">hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">size</span>
    
    <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="s">"""
        存储数据：找到合适的"储物柜"，把东西放进去
        如果储物柜已有东西（冲突），就放在同一个柜子里
        """</span>
        <span class="n">index</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_hash</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">bucket</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">table</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
        
        <span class="c1"># 检查是否已存在，如果存在就更新
</span>        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">bucket</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">==</span> <span class="n">key</span><span class="p">:</span>
                <span class="n">bucket</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
                <span class="k">return</span>
        
        <span class="c1"># 不存在就添加新的
</span>        <span class="n">bucket</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="技术分享的实践">技术分享的实践</h3>

<p>我开始定期在团队内部做技术分享，强迫自己用简单的语言解释复杂的概念。</p>

<p>每次分享前，我都会问自己：</p>

<ul>
  <li>一个新入职的同事能听懂吗？</li>
  <li>能否用生活中的例子来解释？</li>
  <li>最核心的3个要点是什么？</li>
</ul>

<h3 id="博客写作">博客写作</h3>

<p>写技术博客是费曼学习法的绝佳实践。当你试图向读者解释一个概念时，你必须：</p>

<ol>
  <li><strong>明确受众</strong>：你在为谁写作？</li>
  <li><strong>结构化表达</strong>：逻辑清晰，层次分明</li>
  <li><strong>举例说明</strong>：抽象概念具体化</li>
  <li><strong>自我检验</strong>：能否回答读者可能的疑问？</li>
</ol>

<h2 id="具体的实践技巧">具体的实践技巧</h2>

<h3 id="橡皮鸭调试法的升级版">橡皮鸭调试法的升级版</h3>

<p>传统的橡皮鸭调试是向橡皮鸭解释代码逻辑。我的升级版是：</p>

<ul>
  <li>解释<strong>为什么</strong>要这样写代码</li>
  <li>解释这个设计模式的<strong>本质思想</strong></li>
  <li>解释这个算法的<strong>适用场景</strong></li>
</ul>

<h3 id="绘制概念图">绘制概念图</h3>

<p>对于复杂的系统架构，我会画概念图：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户请求 → 负载均衡器 → Web服务器 → 应用服务器 → 数据库
   ↓           ↓           ↓          ↓         ↓
(想订餐)  → (前台分配) → (服务员) → (厨师) → (食材库)
</code></pre></div></div>

<p>通过类比，让抽象的系统架构变得具体可感。</p>

<h3 id="教学相长">教学相长</h3>

<p>我发现最好的学习方式是教别人：</p>

<ul>
  <li><strong>Code Review时</strong>：不只指出问题，更要解释原理</li>
  <li><strong>新人培训时</strong>：从零开始梳理知识体系</li>
  <li><strong>技术讨论时</strong>：用不同的角度解释同一个问题</li>
</ul>

<h2 id="费曼学习法的误区">费曼学习法的误区</h2>

<h3 id="误区一过度简化">误区一：过度简化</h3>

<p>简化不等于不准确。要在准确性和易懂性之间找到平衡。</p>

<h3 id="误区二一次性完美">误区二：一次性完美</h3>

<p>学习是一个迭代过程，第一次解释肯定不完美，要持续改进。</p>

<h3 id="误区三忽视实践">误区三：忽视实践</h3>

<p>理论理解了，还要通过大量编程实践来巩固。</p>

<h2 id="我的收获">我的收获</h2>

<p>应用费曼学习法一年来，我发现：</p>

<ol>
  <li><strong>理解更深入</strong>：不再满足于”能用就行”</li>
  <li><strong>表达更清晰</strong>：技术方案讲解更容易让人理解</li>
  <li><strong>学习更高效</strong>：快速识别知识盲点，针对性学习</li>
  <li><strong>自信心提升</strong>：能够清晰解释的技术，使用起来更有底气</li>
</ol>

<h2 id="结语">结语</h2>

<p>费曼曾说：”Study hard what interests you the most in the most undisciplined, irreverent and original manner possible.”</p>

<p>在编程学习中，保持好奇心，勇于质疑，用自己的方式去理解和表达技术概念。当你能够用简单的语言解释复杂的技术时，你就真正掌握了它。</p>

<blockquote>
  <p>最好的学习方式，就是准备去教授它。</p>
</blockquote>]]></content><author><name>White</name></author><category term="学习" /><category term="思考" /><category term="费曼学习法" /><category term="编程学习" /><category term="技术成长" /><summary type="html"><![CDATA[探讨如何将费曼学习法应用到编程学习中，通过教学相长的方式深入掌握技术知识。]]></summary></entry></feed>