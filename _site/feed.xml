<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://haloowhite.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://haloowhite.com/" rel="alternate" type="text/html" /><updated>2025-08-19T12:07:06+08:00</updated><id>https://haloowhite.com/feed.xml</id><title type="html">White’s Blog</title><subtitle>Web Scraping Specialist &amp; Creative Builder</subtitle><author><name>White</name></author><entry><title type="html">有手就行系列——抖音最新bdms_1.0.1.19_fix参数构造a_bogus</title><link href="https://haloowhite.com/2025/08/18/dy-vmp-tutorial/" rel="alternate" type="text/html" title="有手就行系列——抖音最新bdms_1.0.1.19_fix参数构造a_bogus" /><published>2025-08-18T00:00:00+08:00</published><updated>2025-08-18T00:00:00+08:00</updated><id>https://haloowhite.com/2025/08/18/dy-vmp-tutorial</id><content type="html" xml:base="https://haloowhite.com/2025/08/18/dy-vmp-tutorial/"><![CDATA[<h2 id="0背景介绍">0、背景介绍</h2>

<p>本文将简单直接地带你一起通过补环境的方式，实现某音最新的a_bogus参数构造，并实现验证请求返回对应数据。</p>

<p>目标参数使用JSVMP 技术来实现关键的加密逻辑混淆。关于JSVMP，简单来说，就是用js在前端实现了一个栈式虚拟机，通过js实现相关的原子操作（类似汇编里的汇编机器语句）。相关的更详细的资料可参考这篇论文 <a href="https://pub-df7ca5ef070b4d47a2a7c8b98941cb71.r2.dev/Research%20and%20Implementation%20of%20JavaScript%20Code%20Virtualization%20Protection%20Method%20Based%20on%20WebAssembly.pdf">《基于 WebAssembly 的 JavaScript 代码虚拟化保护方法研究与实现》</a> 。</p>

<p><img src="https://pub-df7ca5ef070b4d47a2a7c8b98941cb71.r2.dev/Research%20and%20Implementation%20of%20JavaScript%20Code%20Virtualization%20Protection%20Method%20Based%20on%20WebAssembly%20.png" alt="《基于 WebAssembly 的 JavaScript 代码虚拟化保护方法研究与实现》论文封面" /></p>

<p>这类JSVMP的特征为，在源码中会有一个又臭又长的字符串和一个又臭又长的函数，里面是又臭又长的循环switch结构，其本质是环境初始化的字节码和对应的解释器。</p>

<p>与之类似采用JSVMP手段的，还有知乎的<code class="language-plaintext highlighter-rouge">x-zse-96</code> 参数、腾讯滑块、快手sig3等</p>

<h2 id="1大致流程">1、大致流程</h2>

<p>一般的JSVMP也好，高强度混淆也好，只要补环境补好了，都可以直接无视相关的内部的执行或实现逻辑细节。只需要把js运行中缺失的环境或源码中进行检测的浏览器相关环境给补全即可，然后再添加一个对应的加密函数构造入口，实现能够构造对应参数。</p>

<p>本文面对的抖音JSVMP可能难度会更高一些，等你真正实际上手的时候，发现几乎所有的逻辑都在走 <code class="language-plaintext highlighter-rouge">return X(e, this, arguments, r)</code> ，以及解释器函数 <code class="language-plaintext highlighter-rouge">function d()</code> 中不断循环。一般有几种解决方法，一是在 <code class="language-plaintext highlighter-rouge">d函数</code> 中将关键的函数调用、运算逻辑，以及堆栈变化等插桩打日志，然后根据打印的日志进行分析相关的逻辑和参数构造；还有一个是反编译，将关键的函数执行等分析出来再复现；再有就是，我们本文用的补环境大法，实现补齐代码中用到的浏览器环境，并构造相关的加密入口实现参数生成。</p>

<h2 id="2补环境细节">2、补环境细节</h2>

<p>我这里就直接给出需要补的环境的细节，直接按下面的参数补即可。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 安装依赖</span>
<span class="c1">// bun add xhr2</span>

<span class="c1">// 基础全局对象设置</span>
<span class="nb">global</span><span class="p">.</span><span class="nx">XMLHttpRequest</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">xhr2</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// Window对象（避免循环引用）</span>
<span class="kd">const</span> <span class="nb">window</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">onwheelx</span><span class="p">:</span> <span class="p">{</span><span class="na">_Ax</span><span class="p">:</span> <span class="dl">'</span><span class="s1">0X21</span><span class="dl">'</span><span class="p">},</span>
  <span class="na">innerHeight</span><span class="p">:</span> <span class="mi">1547</span><span class="p">,</span>
  <span class="na">innerWidth</span><span class="p">:</span> <span class="mi">1917</span><span class="p">,</span>
  <span class="na">outerWidth</span><span class="p">:</span> <span class="mi">3200</span><span class="p">,</span>
  <span class="na">outerHeight</span><span class="p">:</span> <span class="mi">1668</span><span class="p">,</span>
  <span class="na">requestAnimationFrame</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
  <span class="na">addEventListener</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
  <span class="na">screen</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">availHeight</span><span class="p">:</span> <span class="mi">1668</span><span class="p">,</span>
    <span class="na">availLeft</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="na">availTop</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
    <span class="na">availWidth</span><span class="p">:</span> <span class="mi">3200</span><span class="p">,</span>
    <span class="na">colorDepth</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
    <span class="na">height</span><span class="p">:</span> <span class="mi">1800</span><span class="p">,</span>
    <span class="na">isExtended</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
    <span class="na">orientation</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">angle</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
      <span class="na">onchange</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">landscape-primary</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="na">pixelDepth</span><span class="p">:</span> <span class="mi">24</span><span class="p">,</span>
    <span class="na">width</span><span class="p">:</span> <span class="mi">3200</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// 设置parent引用</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>

<span class="c1">// Location对象</span>
<span class="kd">const</span> <span class="nx">location</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">href</span><span class="p">:</span> <span class="dl">"</span><span class="s2">https://www.douyin.com/jingxuan</span><span class="dl">"</span>
<span class="p">};</span>

<span class="c1">// Document对象</span>
<span class="kd">const</span> <span class="nb">document</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">all</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">createElement</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">tag_name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">classList</span><span class="p">:</span> <span class="p">{}</span>
    <span class="p">};</span>
  <span class="p">},</span>
  <span class="na">documentElement</span><span class="p">:</span> <span class="p">{},</span>
  <span class="na">createEvent</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="p">{};</span> <span class="p">},</span>
  <span class="na">addEventListener</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="c1">// Navigator对象</span>
<span class="kd">const</span> <span class="nb">navigator</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">userAgent</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36</span><span class="dl">'</span>
<span class="p">};</span>

<span class="c1">// LocalStorage对象</span>
<span class="kd">const</span> <span class="nx">localStorage</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">getItem</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">key</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">xmst</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="dl">'</span><span class="s1">放置你自己的xmst值</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="c1">// Screen对象</span>
<span class="kd">const</span> <span class="nx">screen</span> <span class="o">=</span> <span class="p">{};</span>

<span class="c1">// 全局引用设置</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nb">window</span> <span class="o">=</span> <span class="nb">window</span><span class="p">;</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nx">location</span> <span class="o">=</span> <span class="nx">location</span><span class="p">;</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nb">document</span> <span class="o">=</span> <span class="nb">document</span><span class="p">;</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nb">navigator</span> <span class="o">=</span> <span class="nb">navigator</span><span class="p">;</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nx">localStorage</span> <span class="o">=</span> <span class="nx">localStorage</span><span class="p">;</span>
<span class="nx">globalThis</span><span class="p">.</span><span class="nx">screen</span> <span class="o">=</span> <span class="nx">screen</span><span class="p">;</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">环境初始化完成</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>先把 <code class="language-plaintext highlighter-rouge">/* V 1.0.1.19-fix.01 */</code> 整个源码copy下来放在本地，将上面这段环境初始化放在复制的源码最前面，这样就能够过相关的环境监测（后续有机会可以专门讲下相关的补环境细节和流程）。</p>

<p>接下来，我们现在来好好解释一下参数的构造入口以及需要注意的点。有一个思路的关键点还是在于<code class="language-plaintext highlighter-rouge">X(e, this, arguments, r)</code>，原理就是，我们需要断在真正参数构造的时候，根据相关的几个参数<code class="language-plaintext highlighter-rouge">e</code>、<code class="language-plaintext highlighter-rouge">argument</code>、<code class="language-plaintext highlighter-rouge">this</code>、<code class="language-plaintext highlighter-rouge">r</code> 这几个参数的特征，然后通过判断条件构造加密入口，例如，我这里直接给出关键源码，就能够构造将加密方法暴露在<code class="language-plaintext highlighter-rouge">window.encrypt</code>中，直接调用，传入对应的参数即可得出目标参数<code class="language-plaintext highlighter-rouge">a_bogus</code> 。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 通过特征值判断是否为目标加密函数</span>
  <span class="k">if</span> <span class="p">(</span>
    <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">===</span>
    <span class="dl">"</span><span class="s2">[34,54,0,3,34,30,214,41,212,34,30,214,30,70,54,0,4,74,0,4,30,218,54,0,5,74,0,5,30,72,54,0,6,33,74,2,33,74,0,6,0,1,54,0,7,74,0,7,41,5,74,0,6,53,11,60,161,74,0,6,60,216,30,178,59,2,54,0,8,74,0,8,30,162,18,30,219,73,165,0,1,29,17,5,74,2,3,30,150,41,18,74,0,8,30,162,18,30,163,73,165,74,2,3,30,150,0,2,26,74,0,8,30,162,18,30,219,73,220,0,1,29,41,45,33,74,3,14,0,0,26,33,74,2,37,74,0,8,30,162,18,30,9,0,0,74,0,2,0,2,54,0,9,74,0,8,30,162,18,30,163,73,220,74,0,9,0,2,26,74,0,7,29,41,10,74,0,5,74,0,8,30,178,20,72,34,30,214,18,30,51,63,108,0,1,26,33,74,2,36,74,0,8,30,215,0,1,41,7,33,74,2,5,0,0,26,34,73,214,25,26,74,1,4,18,30,126,34,74,0,2,39,1,0,2,26,33,76]</span><span class="dl">"</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">找到加密函数入口!</span><span class="dl">"</span><span class="p">);</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">encrypt</span> <span class="o">=</span> <span class="nx">n</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">X</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">,</span> <span class="nx">r</span><span class="p">);</span>
<span class="p">};</span>

</code></pre></div></div>

<p>这里，我们还可以用另一种方法，确实是在抖音里这比较取巧的方式（因地适宜），构造XMLHttpRequest对象，并且通过send函数触发相应的参数构造，然后在合适的地方进行截取，将生成的加密参数给存在全局变量里。关键位置在下面，我就直接给出对应的关键结果了，原理还是和上面一样。</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">n</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">e</span><span class="p">);</span> <span class="c1">// 原始代码</span>
<span class="c1">// 以下是我们添加的截取代码</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">a_bogus</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">got e !!!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">a_bogus</span> <span class="o">=</span> <span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">window.a_bogus</span><span class="dl">"</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">a_bogus</span><span class="p">);</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// 退出进程</span>
<span class="p">}</span>
<span class="nx">v</span><span class="p">[</span><span class="o">++</span><span class="nx">p</span><span class="p">]</span> <span class="o">=</span> <span class="nx">m</span><span class="p">;</span> <span class="c1">// 原始代码</span>
</code></pre></div></div>

<p>这里有个细节，在获取到参数后，执行了<code class="language-plaintext highlighter-rouge">process.exit(0);</code> ，不然程序会继续执行然后报错，我只需要将截取到的参数拿出来即可，形式不重要，目的才是关键！</p>

<h2 id="3验证参数参数有效性">3、验证参数参数有效性</h2>

<p>有了上述完整的参数生成逻辑，就能够通过根据相关的请求信息生成目标加密参数了。我这里拿热搜接口作为测试，当然你也可以使用其他的接口进行测试。</p>

<p><img src="https://pub-df7ca5ef070b4d47a2a7c8b98941cb71.r2.dev/blog-dy-%20verify.png" alt="验证成功照片" /></p>

<p>如图所示，不仅生成参数成功，还返回了相关的数据，说明我们构造的参数是合理可用的。有了参数后，可能后续需要注意的就是相关的风控，比如设备、环境信息、还有IP、msToken等。不过只要有足够耐心，并细心，总能初探成果，祝你顺利！</p>

<h2 id="-题外话">:) 题外话</h2>

<p>等之后有时间精力了，我再写一篇详细讲述一下抖音a_bogus生成中用到的魔改rc4、sm3、魔改base64算法，最主要的还是中间的数组校验位。
先挖一个坑，等有空了再更新吧，如果你遇到相关的爬虫、自动化或开发相关的疑难杂症，也欢迎联系我。</p>]]></content><author><name>White</name></author><category term="JSVMP" /><category term="逆向" /><category term="有手就行系列，逆向" /><category term="JSVMP" /><category term="抖音" /><summary type="html"><![CDATA[本文将简单直接地带你一起通过补环境的方式，实现某音最新的a_bogus参数构造，并实现验证请求返回对应数据...]]></summary></entry><entry><title type="html">一个用于解决JSVMP海量日志导出技巧</title><link href="https://haloowhite.com/2025/08/05/vmp-log-exporter/" rel="alternate" type="text/html" title="一个用于解决JSVMP海量日志导出技巧" /><published>2025-08-05T00:00:00+08:00</published><updated>2025-08-05T00:00:00+08:00</updated><id>https://haloowhite.com/2025/08/05/vmp-log-exporter</id><content type="html" xml:base="https://haloowhite.com/2025/08/05/vmp-log-exporter/"><![CDATA[<p>在运行之前将以下这段代码贴进console中运行，然后执行需要的逻辑，待日志完全打印，手动在console执行 <code class="language-plaintext highlighter-rouge">console.save()</code>，即可立马将所有的日志导出为本地文件</p>

<p>接下来就可以安安心心在本地分析日志内容了</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">VmpLogExporter</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{})</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
            <span class="na">maxConsoleLines</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">maxConsoleLines</span> <span class="o">||</span> <span class="mi">800</span><span class="p">,</span>
            <span class="na">exportBatchSize</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">exportBatchSize</span> <span class="o">||</span> <span class="mi">500</span><span class="p">,</span>
            <span class="na">autoExportInterval</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">autoExportInterval</span> <span class="o">||</span> <span class="mi">60000</span><span class="p">,</span> <span class="c1">// 1分钟</span>
            <span class="na">enableAutoExport</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">enableAutoExport</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">logPrefix</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">logPrefix</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">VMP_LOG</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">keepInConsole</span><span class="p">:</span> <span class="nx">config</span><span class="p">.</span><span class="nx">keepInConsole</span> <span class="o">||</span> <span class="mi">100</span> <span class="c1">// 控制台保留行数</span>
        <span class="p">};</span>
        
        <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">fileCounter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">consoleLineCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">isExporting</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        
        <span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">hijackConsole</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">enableAutoExport</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">startAutoExport</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`🚀 VMP日志导出系统已启动 - 将自动保存日志避免浏览器崩溃`</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="nx">hijackConsole</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">originalMethods</span> <span class="o">=</span> <span class="p">{};</span>
        <span class="p">[</span><span class="dl">'</span><span class="s1">log</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warn</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">debug</span><span class="dl">'</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">method</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">originalMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">]</span> <span class="o">=</span> <span class="nx">console</span><span class="p">[</span><span class="nx">method</span><span class="p">];</span>
            
            <span class="nx">console</span><span class="p">[</span><span class="nx">method</span><span class="p">]</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="c1">// 记录到缓冲区</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">addToBuffer</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
                
                <span class="c1">// 检查是否需要清理console</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">consoleLineCount</span><span class="o">++</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">consoleLineCount</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">maxConsoleLines</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">manageConsole</span><span class="p">();</span>
                <span class="p">}</span>
                
                <span class="c1">// 正常输出到console</span>
                <span class="k">return</span> <span class="nx">originalMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
            <span class="p">};</span>
        <span class="p">});</span>
        
        <span class="k">this</span><span class="p">.</span><span class="nx">originalMethods</span> <span class="o">=</span> <span class="nx">originalMethods</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="nx">addToBuffer</span><span class="p">(</span><span class="nx">level</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">timestamp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">();</span>
        <span class="kd">const</span> <span class="nx">logEntry</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nx">timestamp</span><span class="p">,</span>
            <span class="nx">level</span><span class="p">,</span>
            <span class="na">args</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">serializeArgs</span><span class="p">(</span><span class="nx">args</span><span class="p">),</span>
            <span class="na">raw</span><span class="p">:</span> <span class="nx">args</span>
        <span class="p">};</span>
        
        <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">logEntry</span><span class="p">);</span>
        
        <span class="c1">// 如果缓冲区过大，自动导出</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">exportBatchSize</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">exportLogs</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="nx">serializeArgs</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">args</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">arg</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">arg</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">arg</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">try</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">arg</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="dl">'</span><span class="s1">[Circular Reference Object]</span><span class="dl">'</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">arg</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="nx">manageConsole</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isExporting</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
        
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`📤 正在导出日志避免浏览器卡死...`</span><span class="p">);</span>
        
        <span class="c1">// 导出当前日志</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">exportLogs</span><span class="p">();</span>
        
        <span class="c1">// 清理console但保留最新的一些日志</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
        
        <span class="c1">// 重新显示最近的重要日志</span>
        <span class="kd">const</span> <span class="nx">recentLogs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">keepInConsole</span><span class="p">);</span>
        <span class="nx">recentLogs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">log</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">originalMethods</span><span class="p">[</span><span class="nx">log</span><span class="p">.</span><span class="nx">level</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">console</span><span class="p">,</span> <span class="p">[</span>
                <span class="s2">`[</span><span class="p">${</span><span class="nx">log</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">}</span><span class="s2">]`</span><span class="p">,</span> 
                <span class="p">...</span><span class="nx">log</span><span class="p">.</span><span class="nx">raw</span>
            <span class="p">]);</span>
        <span class="p">});</span>
        
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`🔄 Console已清理，保留了最近</span><span class="p">${</span><span class="nx">recentLogs</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">条日志`</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">consoleLineCount</span> <span class="o">=</span> <span class="nx">recentLogs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">async</span> <span class="nx">exportLogs</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isExporting</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
        
        <span class="k">this</span><span class="p">.</span><span class="nx">isExporting</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">timestamp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">:.</span><span class="se">]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">logPrefix</span><span class="p">}</span><span class="s2">_</span><span class="p">${</span><span class="nx">timestamp</span><span class="p">}</span><span class="s2">_part</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">fileCounter</span><span class="p">}</span><span class="s2">.json`</span><span class="p">;</span>
            
            <span class="kd">const</span> <span class="nx">exportData</span> <span class="o">=</span> <span class="p">{</span>
                <span class="na">exportInfo</span><span class="p">:</span> <span class="p">{</span>
                    <span class="na">timestamp</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">(),</span>
                    <span class="na">partNumber</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">fileCounter</span><span class="p">,</span>
                    <span class="na">totalLogs</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
                    <span class="na">source</span><span class="p">:</span> <span class="dl">'</span><span class="s1">VMP_Logger</span><span class="dl">'</span>
                <span class="p">},</span>
                <span class="na">logs</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span>
            <span class="p">};</span>
            
            <span class="c1">// 创建并下载文件</span>
            <span class="kd">const</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Blob</span><span class="p">([</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">exportData</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">)],</span> <span class="p">{</span> 
                <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">application/json</span><span class="dl">'</span> 
            <span class="p">});</span>
            <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
            
            <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">a</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
            <span class="nx">a</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
            <span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">display</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">;</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
            <span class="nx">a</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
            <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
            <span class="nx">URL</span><span class="p">.</span><span class="nx">revokeObjectURL</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
            
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`✅ 已导出 </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2"> 条日志到文件: </span><span class="p">${</span><span class="nx">filename</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
            
            <span class="c1">// 清空缓冲区</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">fileCounter</span><span class="o">++</span><span class="p">;</span>
            
        <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">❌ 导出日志失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">isExporting</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="nx">startAutoExport</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`⏰ 定时导出日志: </span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2"> 条`</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">exportLogs</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">},</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">autoExportInterval</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="c1">// 手动导出当前缓冲区</span>
    <span class="nx">manualExport</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">🖱️ 手动导出日志...</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">exportLogs</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="c1">// 导出所有日志的合并版本</span>
    <span class="nx">exportAllLogs</span><span class="p">()</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">timestamp</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">[</span><span class="sr">:.</span><span class="se">]</span><span class="sr">/g</span><span class="p">,</span> <span class="dl">'</span><span class="s1">-</span><span class="dl">'</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">filename</span> <span class="o">=</span> <span class="s2">`</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">logPrefix</span><span class="p">}</span><span class="s2">_COMPLETE_</span><span class="p">${</span><span class="nx">timestamp</span><span class="p">}</span><span class="s2">.txt`</span><span class="p">;</span>
        
        <span class="kd">const</span> <span class="nx">allLogs</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">log</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="s2">`[</span><span class="p">${</span><span class="nx">log</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">}</span><span class="s2">] </span><span class="p">${</span><span class="nx">log</span><span class="p">.</span><span class="nx">level</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()}</span><span class="s2">: </span><span class="p">${</span><span class="nx">log</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">)}</span><span class="s2">`</span><span class="p">;</span>
        <span class="p">}).</span><span class="nx">join</span><span class="p">(</span><span class="dl">'</span><span class="se">\n</span><span class="dl">'</span><span class="p">);</span>
        
        <span class="kd">const</span> <span class="nx">blob</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Blob</span><span class="p">([</span><span class="nx">allLogs</span><span class="p">],</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">text/plain</span><span class="dl">'</span> <span class="p">});</span>
        <span class="kd">const</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">URL</span><span class="p">.</span><span class="nx">createObjectURL</span><span class="p">(</span><span class="nx">blob</span><span class="p">);</span>
        
        <span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">a</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">a</span><span class="p">.</span><span class="nx">href</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
        <span class="nx">a</span><span class="p">.</span><span class="nx">download</span> <span class="o">=</span> <span class="nx">filename</span><span class="p">;</span>
        <span class="nx">a</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
        <span class="nx">URL</span><span class="p">.</span><span class="nx">revokeObjectURL</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
        
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`📄 已导出完整文本日志: </span><span class="p">${</span><span class="nx">filename</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="c1">// 获取状态信息</span>
    <span class="nx">getStatus</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">bufferSize</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">logBuffer</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span>
            <span class="na">consoleLines</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">consoleLineCount</span><span class="p">,</span>
            <span class="na">fileCounter</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">fileCounter</span><span class="p">,</span>
            <span class="na">isExporting</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">isExporting</span>
        <span class="p">};</span>
    <span class="p">}</span>
    
    <span class="c1">// 恢复原始console</span>
    <span class="nx">restore</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">[</span><span class="dl">'</span><span class="s1">log</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">warn</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">debug</span><span class="dl">'</span><span class="p">].</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">method</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">[</span><span class="nx">method</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">originalMethods</span><span class="p">[</span><span class="nx">method</span><span class="p">];</span>
        <span class="p">});</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">🔄 已恢复原始console行为</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 使用示例和配置</span>
<span class="kd">const</span> <span class="nx">vmpLogger</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">VmpLogExporter</span><span class="p">({</span>
    <span class="na">maxConsoleLines</span><span class="p">:</span> <span class="mi">1000000</span><span class="p">,</span>      <span class="c1">// console最大行数</span>
    <span class="na">exportBatchSize</span><span class="p">:</span> <span class="mi">1000000</span><span class="p">,</span>      <span class="c1">// 批量导出大小</span>
    <span class="na">autoExportInterval</span><span class="p">:</span> <span class="mi">60000</span><span class="p">,</span> <span class="c1">// 60秒自动导出</span>
    <span class="na">enableAutoExport</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>    <span class="c1">// 启用自动导出</span>
    <span class="na">logPrefix</span><span class="p">:</span> <span class="dl">'</span><span class="s1">VMP_REVERSE</span><span class="dl">'</span><span class="p">,</span>  <span class="c1">// 文件前缀</span>
    <span class="na">keepInConsole</span><span class="p">:</span> <span class="mi">1000000</span>      <span class="c1">// console保留行数</span>
<span class="p">});</span>

<span class="c1">// 全局访问接口</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">vmpLogger</span> <span class="o">=</span> <span class="nx">vmpLogger</span><span class="p">;</span>

<span class="c1">// 添加快捷命令</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">save</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">vmpLogger</span><span class="p">.</span><span class="nx">manualExport</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">saveAll</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">vmpLogger</span><span class="p">.</span><span class="nx">exportAllLogs</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">status</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">table</span><span class="p">(</span><span class="nx">vmpLogger</span><span class="p">.</span><span class="nx">getStatus</span><span class="p">());</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`
🎯 VMP逆向日志系统使用说明:
• 系统会自动管理console日志，避免浏览器卡死
• 所有日志都会保存，不会丢失任何VMP算法信息
• 快捷命令:
  - console.save() : 手动导出当前日志
  - console.saveAll() : 导出完整文本日志
  - console.status() : 查看系统状态
• 日志文件会自动下载到Downloads文件夹
• 每个JSON文件包含完整的时间戳和元数据
`</span><span class="p">);</span>
</code></pre></div></div>]]></content><author><name>White</name></author><category term="JSVMP" /><category term="逆向" /><category term="逆向" /><category term="JSVMP" /><category term="日志导出" /><summary type="html"><![CDATA[在运行之前将以下这段代码贴进console中运行，然后执行需要的逻辑，待日志完全打印，手动在console执行 `console.save()`，即可立马将所有的日志导出为本地文件...]]></summary></entry></feed>